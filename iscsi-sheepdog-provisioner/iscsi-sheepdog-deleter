#!/bin/sh

PROVISIONER_NAME=${PROVISIONER_NAME:-kvaps/sheepdog}

warn () {
  echo "$@" >&2
}

die () {
  status="$1"
  shift
  warn "$@"
  exit "$status"
}

if ! command -v dog >/dev/null; then
  die 1 "Command 'dog' not found"
fi

echo "Starting loop"
unset column
kubectl get pv --all-namespaces -o json -w |
  jq --raw-output --unbuffered '
  .metadata.name,
  .metadata.deletionTimestamp,
  .spec.claimRef.namespace,
  .status.phase,
  .spec.persistentVolumeReclaimPolicy,
  .spec.storageClassName,
  .metadata.annotations["pv.kubernetes.io/provisioned-by"]' |
while read string; do
  column=$((column+1))
  case "${column}" in
    1)
      volumename="${string}"
      continue
      ;;
    2)
      deletiontimestamp="${string}"
      continue
      ;;
    3)
      namespace="${string}"
      continue
      ;;
    4)
      phase="${string}"
      continue
      ;;
    5)
      reclaimpolicy="${string}"
      continue
      ;;
    6)
      storageclass="${string}"
      continue
      ;;
    7)
      provisioner="${string}"
      unset column
      ;;
  esac

  if
    [ "${phase}" != "Released" ] ||
    ! ( [ "${reclaimpolicy}" = "Delete" ] ||
        ( [ "${reclaimpolicy}" = "Retain" ] && [ "${deletiontimestamp}" != "null" ] )
      ) ||
    [ "${provisioner}" != "${PROVISIONER_NAME}" ] ||
    [ "${storageclass}" = "null" ]
  then
    continue
  fi

  echo "Volume '${namespace}/${volumename}': "

  kubectl get storageclass "${storageclass}" -o json |
    jq --raw-output --unbuffered '
    .parameters.address,
    .parameters.port,
    .reclaimPolicy' |
  while read string; do
    column=$((column+1))
    case "${column}" in
      1)
        address="${string}"
        continue
        ;;
      2)
        port="${string}"
        continue
        ;;
      3)
        reclaimpolicy="${string}"
        unset column
        ;;
    esac

    if [ "${reclaimpolicy}" = null ]; then
      # storage class is not exist
      continue
    fi

    # load sheepdog options
    unset dog_options
    for key in address port; do
      val="$(eval "echo \"\${$key}\"")"
      case "${val}" in
        null)
          continue
          ;;
        *)
          export dog_options="${dog_options} --${key}=${val}"
          continue
          ;;
      esac
    done

    echo "Removing vdi '${volumename}'"

    dog vdi delete ${dog_options} "${volumename}"
    if [ $? -eq "0" ]; then
      kubectl delete pv -n "${namespace}" "${volumename}"
    fi
  done

done
